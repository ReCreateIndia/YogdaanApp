// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package io.flutter.plugins.firebaseauth;

import android.app.Activity;
import android.content.Context;
import android.net.Uri;
import android.util.SparseArray;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.FirebaseApiNotAvailableException;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseException;
import com.google.firebase.FirebaseNetworkException;
import com.google.firebase.FirebaseTooManyRequestsException;
import com.google.firebase.auth.ActionCodeSettings;
import com.google.firebase.auth.AdditionalUserInfo;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.EmailAuthProvider;
import com.google.firebase.auth.FacebookAuthProvider;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuth.AuthStateListener;
import com.google.firebase.auth.FirebaseAuthException;
import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.FirebaseUserMetadata;
import com.google.firebase.auth.GetTokenResult;
import com.google.firebase.auth.GithubAuthProvider;
import com.google.firebase.auth.GoogleAuthProvider;
import com.google.firebase.auth.OAuthProvider;
import com.google.firebase.auth.PhoneAuthCredential;
import com.google.firebase.auth.PhoneAuthProvider;
import com.google.firebase.auth.PhoneAuthProvider.ForceResendingToken;
import com.google.firebase.auth.SignInMethodQueryResult;
import com.google.firebase.auth.TwitterAuthProvider;
import com.google.firebase.auth.UserInfo;
import com.google.firebase.auth.UserProfileChangeRequest;
import com.google.gson.Gson;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.embedding.engine.plugins.activity.ActivityAware;
import io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.MethodChannel.MethodCallHandler;
import io.flutter.plugin.common.MethodChannel.Result;
import io.flutter.plugin.common.PluginRegistry;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.TimeUnit;

/** Flutter plugin for Firebase Auth. */
public class FirebaseAuthPlugin implements MethodCallHandler, FlutterPlugin, ActivityAware {
  // Only set registrar for v1 embedder.
  private PluginRegistry.Registrar registrar;
  private SparseArray<AuthStateListener> authStateListeners;
  private SparseArray<ForceResendingToken> forceResendingTokens;
  private MethodChannel channel;
  // Only set activity for v2 embedder. Always access activity from getActivity() method.
  private Activity activity;

  // Handles are ints used as indexes into the sparse array of active observers
  private int nextHandle = 0;

  public static void registerWith(PluginRegistry.Registrar registrar) {
    FirebaseAuthPlugin instance = new FirebaseAuthPlugin();
    instance.registrar = registrar;
    instance.initInstance(registrar.messenger(), registrar.context());
  }

  private void initInstance(BinaryMessenger messenger, Context context) {
    channel = new MethodChannel(messenger, "plugins.flutter.io/firebase_auth");
    FirebaseApp.initializeApp(context);
    channel.setMethodCallHandler(this);
    authStateListeners = new SparseArray<>();
    forceResendingTokens = new SparseArray<>();
  }

  // Only access activity with this method.
  public Activity getActivity() {
    return registrar != null ? registrar.activity() : activity;
  }

  @Override
  public void onAttachedToEngine(@NonNull FlutterPluginBinding binding) {
    initInstance(binding.getBinaryMessenger(), binding.getApplicationContext());
  }

  @Override
  public void onDetachedFromEngine(@NonNull FlutterPluginBinding binding) {
    authStateListeners = null;
    forceResendingTokens = null;
    channel.setMethodCallHandler(null);
    channel = null;
  }

  @Override
  public void onAttachedToActivity(ActivityPluginBinding activityPluginBinding) {
    activity = activityPluginBinding.getActivity();
  }

  @Override
  public void onDetachedFromActivityForConfigChanges() {
    activity = null;
  }

  @Override
  public void onReattachedToActivityForConfigChanges(ActivityPluginBinding activityPluginBinding) {
    activity = activityPluginBinding.getActivity();
  }

  @Override
  public void onDetachedFromActivity() {
    activity = null;
  }

  private FirebaseAuth getAuth(MethodCall call) {
    Map<String, Object> arguments = call.arguments();
    String appName = (String) arguments.get("app");
    FirebaseApp app = FirebaseApp.getInstance(appName);
    return FirebaseAuth.getInstance(app);
  }

  @Override
  public void onMethodCall(MethodCall call, Result result) {
    switch (call.method) {
      case "currentUser":
        handleCurrentUser(call, result, getAuth(call));
        break;
      case "signInAnonymously":
        handleSignInAnonymously(call, result, getAuth(call));
        break;
      case "createUserWithEmailAndPassword":
        handleCreateUserWithEmailAndPassword(call, result, getAuth(call));
        break;
      case "fetchSignInMethodsForEmail":
        handleFetchSignInMethodsForEmail(call, result, getAuth(call));
        break;
      case "sendPasswordResetEmail":
        handleSendPasswordResetEmail(call, result, getAuth(call));
        break;
      case "sendLinkToEmail":
        handleSendLinkToEmail(call, result, getAuth(call));
        break;
      case "isSignInWithEmailLink":
        handleIsSignInWithEmailLink(call, result, getAuth(call));
        break;
      case "signInWithEmailAndLink":
        handleSignInWithEmailAndLink(call, result, getAuth(call));
        break;
      case "sendEmailVerification":
        handleSendEmailVerification(call, result, getAuth(call));
        break;
      case "reload":
        handleReload(call, result, getAuth(call));
        break;
      case "delete":
        handleDelete(call, result, getAuth(call));
        break;
      case "signInWithCredential":
        handleSignInWithCredential(call, result, getAuth(call));
        break;
      case "signInWithCustomToken":
        handleSignInWithCustomToken(call, result, getAuth(call));
        break;
      case "signOut":
        handleSignOut(call, result, getAuth(call));
        break;
      case "getIdToken":
        handleGetToken(call, result, getAuth(call));
        break;
      case "reauthenticateWithCredential":
        handleReauthenticateWithCredential(call, result, getAuth(call));
        break;
      case "linkWithCredential":
        handleLinkWithCredential(call, result, getAuth(call));
        break;
      case "unlinkFromProvider":
        handleUnlinkFromProvider(call, result, getAuth(call));
        break;
      case "updateEmail":
        handleUpdateEmail(call, result, getAuth(call));
        break;
      case "updatePhoneNumberCredential":
        handleUpdatePhoneNumber(call, result, getAuth(call));
        break;
      case "updatePassword":
        handleUpdatePassword(call, result, getAuth(call));
        break;
      case "updateProfile":
        handleUpdateProfile(call, result, getAuth(call));
        break;
      case "startListeningAuthState":
        handleStartListeningAuthState(call, result, getAuth(call));
        break;
      case "stopListeningAuthState":
        handleStopListeningAuthState(call, result, getAuth(call));
        break;
      case "verifyPhoneNumber":
        handleVerifyPhoneNumber(call, result, getAuth(call));
        break;
      case "signInWithPhoneNumber":
        handleSignInWithPhoneNumber(call, result, getAuth(call));
        break;
      case "setLanguageCode":
        handleSetLanguageCode(call, result, getAuth(call));
        break;
      case "confirmPasswordReset":
        handleConfirmPasswordReset(call, result, getAuth(call));
        break;
      default:
        result.notImplemented();
        break;
    }
  }

  private void handleSignInWithPhoneNumber(
      MethodCall call, Result result, FirebaseAuth firebaseAuth) {
    Map<String, String> arguments = call.arguments();
    String verificationId = arguments.get("verificationId");
    String smsCode = arguments.get("smsCode");

    PhoneAuthCredential phoneAuthCredential =
        PhoneAuthProvider.getCredential(verificationId, smsCode);
    firebaseAuth
        .signInWithCredential(phoneAuthCredential)
        .addOnCompleteListener(new SignInCompleteListener(result));
  }

  private void handleVerifyPhoneNumber(
      MethodCall call, Result result, final FirebaseAuth firebaseAuth) {
    Map<String, Object> arguments = call.arguments();
    final int handle = (int) arguments.get("handle");
    String phoneNumber = (String) arguments.get("phoneNumber");
    int timeout = (int) arguments.get("timeout");

    PhoneAuthProvider.OnVerificationStateChangedCallbacks verificationCallbacks =
        new PhoneAuthProvider.OnVerificationStateChangedCallbacks() {
          @Override
          public void onVerificationCompleted(PhoneAuthCredential phoneAuthCredential) {
            Map<String, Object> arguments = new HashMap<>();
            arguments.put("handle", handle);
            String parsedJson = new Gson().toJson(phoneAuthCredential);
            arguments.put("phoneAuthCredential", parsedJson);
            channel.invokeMethod("phoneVerificationCompleted", arguments);
          }

          @Override
          public void onVerificationFailed(FirebaseException e) {
            Map<String, Object> arguments = new HashMap<>();
            arguments.put("handle", handle);
            arguments.put("exception", getVerifyPhoneNumberExceptionMap(e));
            channel.invokeMethod("phoneVerificationFailed", arguments);
          }

          @Override
          public void onCodeSent(
              String verificationId, PhoneAuthProvider.ForceResendingToken forceResendingToken) {
            Map<String, Object> arguments = new HashMap<>();
            arguments.put("handle", handle);
            arguments.put("verificationId", verificationId);
            arguments.put("forceResendingToken", forceResendingToken.hashC